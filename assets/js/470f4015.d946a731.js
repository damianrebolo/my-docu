"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6151],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(v,i(i({ref:t},p),{},{components:n})):a.createElement(v,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={id:"js-variables",title:"Variables",sidebar_label:"Var - let - const",slug:"/js-variables",sidebar_position:1},i=void 0,s={unversionedId:"javascript/js-variables",id:"javascript/js-variables",title:"Variables",description:"var Declarations and Hoisting",source:"@site/docs/javascript/js-variables.md",sourceDirName:"javascript",slug:"/js-variables",permalink:"/my-docu/docs/js-variables",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/js-variables.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"js-variables",title:"Variables",sidebar_label:"Var - let - const",slug:"/js-variables",sidebar_position:1},sidebar:"mySidebar",previous:{title:"History",permalink:"/my-docu/docs/w3-history"},next:{title:"Spread Syntax",permalink:"/my-docu/docs/spread-syntax"}},l={},c=[{value:"var Declarations and Hoisting",id:"var-declarations-and-hoisting",level:2},{value:"let vs var Declarations and Lexical Scopes",id:"let-vs-var-declarations-and-lexical-scopes",level:3},{value:"Variable Declaration with let and const",id:"variable-declaration-with-let-and-const",level:3},{value:"Resources",id:"resources",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"var-declarations-and-hoisting"},"var Declarations and Hoisting"),(0,r.kt)("p",null,"Hoisting is a mechanism via which variable declarations are moved to the top of their scope before code execution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function myFunction() {\n  if (true) {\n    var mycolor = "red";\n  }\n\n  console.log(mycolor); // red\n}\n\nmyFunction();\n')),(0,r.kt)("p",null,"The below code will give you a clear idea of how javascript is reading your code and where exactly is the variable color being created."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function myFunction() {\n  var mycolor;\n  if (true) {\n    mycolor = "red";\n  }\n\n  console.log(mycolor); // red\n}\n\nmyFunction();\n')),(0,r.kt)("h3",{id:"let-vs-var-declarations-and-lexical-scopes"},"let vs var Declarations and Lexical Scopes"),(0,r.kt)("p",null,"Let and const have a block scope but var has function scope."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Before moving forward the block in javascript is anything between parenthesis like {\u2026}.So one set of parenthesis makes one block. example of a block is below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"//ES5\nvar num = 10;\nfor (var num = 0; num < 3; num++) {\n  console.log(num); //0 1 2\n}\nconsole.log(num); //3\n\n//ES6\nlet num = 10;\nfor (let num = 0; num < 3; num++) {\n  console.log(num); //0 1 2\n}\nconsole.log(num); //10\n")),(0,r.kt)("h3",{id:"variable-declaration-with-let-and-const"},"Variable Declaration with let and const"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"const")," is just like ",(0,r.kt)("strong",{parentName:"p"},"let")," except you can not re-assign it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const x = {\n  y: 2,\n};\n\nx = {\n  y: 6,\n};\n// TypeError: Assigment to constant variable\n\nx.y = 6;\nconsole.log(x); // { y: 6 }\n")),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"In my opinion you should always use const if you don't need to re-assign the variable. We want to minimize mutable state.")),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=sjyJBL5fkp8"},"https://www.youtube.com/watch?v=sjyJBL5fkp8")))}u.isMDXComponent=!0}}]);