"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6161],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var r=o.createContext({}),c=function(e){var t=o.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(r.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(n),m=a,k=h["".concat(r,".").concat(m)]||h[m]||p[m]||i;return n?o.createElement(k,s(s({ref:t},u),{},{components:n})):o.createElement(k,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=h;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<i;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9133:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const i={id:"js-sync-vs-async",title:"Synchronous vs Asynchronous",sidebar_label:"Synchronous vs Asynchronous",slug:"/sync-vs-async",sidebar_position:5},s=void 0,l={unversionedId:"javascript/js-sync-vs-async",id:"javascript/js-sync-vs-async",title:"Synchronous vs Asynchronous",description:"JavaScript is a single-threaded, non-blocking, asynchronous, concurrent programming language.",source:"@site/docs/javascript/js-sync-vs-async.md",sourceDirName:"javascript",slug:"/sync-vs-async",permalink:"/my-docu/docs/sync-vs-async",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/js-sync-vs-async.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"js-sync-vs-async",title:"Synchronous vs Asynchronous",sidebar_label:"Synchronous vs Asynchronous",slug:"/sync-vs-async",sidebar_position:5},sidebar:"mySidebar",previous:{title:"Async / await",permalink:"/my-docu/docs/async-await"},next:{title:"Shallow Vs Deep Copy",permalink:"/my-docu/docs/shallow-vs-deep-copy"}},r={},c=[{value:"Synchronous JavaScript \u2013 How the Function Execution Stack Works",id:"synchronous-javascript--how-the-function-execution-stack-works",level:2},{value:"Example 1",id:"example-1",level:3},{value:"It does the following:",id:"it-does-the-following",level:4},{value:"Example 2",id:"example-2",level:3},{value:"It does the following:",id:"it-does-the-following-1",level:4},{value:"Asynchronous JavaScript \u2013 How Browser APIs and Promises Work",id:"asynchronous-javascript--how-browser-apis-and-promises-work",level:2},{value:"How to Handle Browser APIs/Web APIs",id:"how-to-handle-browser-apisweb-apis",level:3},{value:"How the JavaScript Callback Queue Works (aka Task Queue)",id:"how-the-javascript-callback-queue-works-aka-task-queue",level:4},{value:"Example",id:"example",level:5},{value:"It does the following:",id:"it-does-the-following-2",level:6},{value:"How the JavaScript Engine Handles Promises",id:"how-the-javascript-engine-handles-promises",level:3},{value:"What is the Job Queue in JavaScript?",id:"what-is-the-job-queue-in-javascript",level:4},{value:"Example",id:"example-3",level:5},{value:"It does the following:",id:"it-does-the-following-3",level:6}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"JavaScript is a single-threaded, non-blocking, asynchronous, concurrent programming language.\nBy default, every line in a function executes sequentially, one line at a time. The same is applicable even when you invoke multiple functions in your code. Again, line by line.")),(0,a.kt)("h2",{id:"synchronous-javascript--how-the-function-execution-stack-works"},"Synchronous JavaScript \u2013 How the Function Execution Stack Works"),(0,a.kt)("p",null,"So what happens when you define a function and then invoke it? The JavaScript engine maintains a ",(0,a.kt)("inlineCode",{parentName:"p"},"stack")," data structure called ",(0,a.kt)("inlineCode",{parentName:"p"},"function execution stack"),". The purpose of the ",(0,a.kt)("inlineCode",{parentName:"p"},"stack")," is to track the current function in execution."),(0,a.kt)("h3",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function f1() {\n  // some code\n}\nfunction f2() {\n  // some code\n}\nfunction f3() {\n  // some code\n}\n\n// Invoke the functions one by one\nf1();\nf2();\nf3();\n")),(0,a.kt)("h4",{id:"it-does-the-following"},"It does the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"First, f1() goes into the stack, executes, and pops out."),(0,a.kt)("li",{parentName:"ul"},"Then f2() does the same, and finally f3()."),(0,a.kt)("li",{parentName:"ul"},"After that, the stack is empty, with nothing else to execute.")),(0,a.kt)("h3",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function f1() {\n  // Some code\n}\nfunction f2() {\n  f1();\n}\nfunction f3() {\n  f2();\n}\nf3();\n")),(0,a.kt)("h4",{id:"it-does-the-following-1"},"It does the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Notice that first f3() gets into the stack, invoking another function, f2()."),(0,a.kt)("li",{parentName:"ul"},"So now f2() gets inside while f3() remains in the stack."),(0,a.kt)("li",{parentName:"ul"},"The f2() function invokes f1(). So, time for f1() to go inside the stack with both f2() and f3() remaining inside."),(0,a.kt)("li",{parentName:"ul"},"First, f1() finishes executing and comes out of the stack."),(0,a.kt)("li",{parentName:"ul"},"Right after that f2() finishes, and finally f3().")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The bottom line is that everything that happens inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"function execution stack")," is sequential. This is the ",(0,a.kt)("inlineCode",{parentName:"p"},"Synchronous")," part of JavaScript. JavaScript's main thread makes sure that it takes care of everything in the stack before it starts looking into anything elsewhere.")),(0,a.kt)("h2",{id:"asynchronous-javascript--how-browser-apis-and-promises-work"},"Asynchronous JavaScript \u2013 How Browser APIs and Promises Work"),(0,a.kt)("p",null,"The word ",(0,a.kt)("inlineCode",{parentName:"p"},"asynchronous")," means not occurring at the same time. Typically, executing things in sequence works well. But you may sometimes need to fetch data from the server or execute a function with a delay, something you do not anticipate occurring NOW. So, you want the code to execute ",(0,a.kt)("inlineCode",{parentName:"p"},"asynchronously"),"."),(0,a.kt)("p",null,"We can classify most asynchronous JavaScript operations with two primary triggers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Browser API/Web API events or functions")," These include methods like setTimeout, or event handlers like click, mouse over, scroll, and many more."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Promises:")," A unique JavaScript object that allows us to perform asynchronous operations.")),(0,a.kt)("h3",{id:"how-to-handle-browser-apisweb-apis"},"How to Handle Browser APIs/Web APIs"),(0,a.kt)("p",null,"Browser APIs like ",(0,a.kt)("inlineCode",{parentName:"p"},"setTimeout")," and event handlers rely on ",(0,a.kt)("inlineCode",{parentName:"p"},"callback")," functions. A callback function executes when an asynchronous operation completes."),(0,a.kt)("h4",{id:"how-the-javascript-callback-queue-works-aka-task-queue"},"How the JavaScript Callback Queue Works (aka Task Queue)"),(0,a.kt)("p",null,"JavaScript maintains a queue of callback functions. It is called a callback queue or task queue. A queue data structure is ",(0,a.kt)("inlineCode",{parentName:"p"},"First-In-First-Out(FIFO)"),". So, the callback function that first gets into the queue has the opportunity to go out first."),(0,a.kt)("h5",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function f1() {\n  console.log("f1");\n}\n\nfunction f2() {\n  console.log("f2");\n}\n\nfunction main() {\n  console.log("main");\n\n  setTimeout(f1, 0);\n\n  f2();\n}\n\nmain();\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"main\nf2\nf1")),(0,a.kt)("h6",{id:"it-does-the-following-2"},"It does the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The main() function gets inside the call stack."),(0,a.kt)("li",{parentName:"ul"},"It has a console log to print the word main. The console.log('main') executes and goes out of the stack."),(0,a.kt)("li",{parentName:"ul"},"The setTimeout browser API takes place."),(0,a.kt)("li",{parentName:"ul"},"The callback function puts it into the callback queue."),(0,a.kt)("li",{parentName:"ul"},"In the stack, execution occurs as usual, so f2() gets into the stack. The console log of f2() executes. Both go out of the stack."),(0,a.kt)("li",{parentName:"ul"},"The main() also pops out of the stack."),(0,a.kt)("li",{parentName:"ul"},"The event loop recognizes that the call stack is empty, and there is a callback function in the queue."),(0,a.kt)("li",{parentName:"ul"},"The callback function f1() then goes into the stack. Execution starts. The console log executes, and f1() also comes out of the stack."),(0,a.kt)("li",{parentName:"ul"},"At this point, nothing else is in the stack and queue to execute further.")),(0,a.kt)("h3",{id:"how-the-javascript-engine-handles-promises"},"How the JavaScript Engine Handles Promises"),(0,a.kt)("p",null,"JavaScript engine doesn't use the same ",(0,a.kt)("inlineCode",{parentName:"p"},"callback queue")," we have seen earlier for browser APIs. It uses another special queue called the ",(0,a.kt)("inlineCode",{parentName:"p"},"Job Queue"),"."),(0,a.kt)("h4",{id:"what-is-the-job-queue-in-javascript"},"What is the Job Queue in JavaScript?"),(0,a.kt)("p",null,"Every time a promise occurs in the code, the executor function gets into the ",(0,a.kt)("inlineCode",{parentName:"p"},"job queue"),". The event loop works, as usual, to look into the queues but gives priority to the ",(0,a.kt)("inlineCode",{parentName:"p"},"job queue")," items over the ",(0,a.kt)("inlineCode",{parentName:"p"},"callback queue")," items when the stack is free."),(0,a.kt)("h5",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function f1() {\n  console.log("f1");\n}\n\nfunction f2() {\n  console.log("f2");\n}\n\nfunction main() {\n  console.log("main");\n\n  setTimeout(f1, 0);\n\n  new Promise((resolve, reject) => resolve("I am a promise")).then((resolve) =>\n    console.log(resolve)\n  );\n\n  f2();\n}\n\nmain();\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"main\nf2\nI am a promise\nf1")),(0,a.kt)("h6",{id:"it-does-the-following-3"},"It does the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The main() function gets inside the call stack."),(0,a.kt)("li",{parentName:"ul"},"It has a console log to print the word main. The console.log('main') executes and goes out of the stack."),(0,a.kt)("li",{parentName:"ul"},"The setTimeout browser API takes place."),(0,a.kt)("li",{parentName:"ul"},"The callback function puts it into the callback queue."),(0,a.kt)("li",{parentName:"ul"},"The Promise takes place."),(0,a.kt)("li",{parentName:"ul"},"The Anonymous function puts it into the Jobs queue."),(0,a.kt)("li",{parentName:"ul"},"In the stack, execution occurs as usual, so f2() gets into the stack. The console log of f2() executes. Both go out of the stack."),(0,a.kt)("li",{parentName:"ul"},"The main() also pops out of the stack."),(0,a.kt)("li",{parentName:"ul"},"The event loop recognizes that the call stack is empty, and there is an anonymous function in the job queue."),(0,a.kt)("li",{parentName:"ul"},"The anonymous function and console.log exectures, anonymous functions comes out of the stack."),(0,a.kt)("li",{parentName:"ul"},"The event loop recognizes that the call stack is empty, and there is a callback function in the queue."),(0,a.kt)("li",{parentName:"ul"},"The callback function f1() then goes into the stack. Execution starts. The console log executes, and f1() also comes out of the stack."),(0,a.kt)("li",{parentName:"ul"},"At this point, nothing else is in the stack and queue to execute further.")))}p.isMDXComponent=!0}}]);