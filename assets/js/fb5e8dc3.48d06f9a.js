"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8859],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(f,o(o({ref:n},p),{},{components:t})):a.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3193:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={id:"js-closure",title:"What is a closure?",sidebar_label:"What is a Closure?",slug:"/closure",sidebar_position:4},o=void 0,s={unversionedId:"javascript/js-closure",id:"javascript/js-closure",title:"What is a closure?",description:"A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function\u2019s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.",source:"@site/docs/javascript/js-closure.md",sourceDirName:"javascript",slug:"/closure",permalink:"/my-docu/docs/closure",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/js-closure.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"js-closure",title:"What is a closure?",sidebar_label:"What is a Closure?",slug:"/closure",sidebar_position:4},sidebar:"mySidebar",previous:{title:"Introduction to events",permalink:"/my-docu/docs/introduction-to-events"},next:{title:"Objects",permalink:"/my-docu/docs/objects-in-js"}},l={},c=[{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:2},{value:"Example 4 - Practical closures",id:"example-4---practical-closures",level:3},{value:"Closure Scope Chain",id:"closure-scope-chain",level:2},{value:"Performance considerations",id:"performance-considerations",level:2},{value:"Resources",id:"resources",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A closure is the combination of a function bundled together ",(0,r.kt)("em",{parentName:"p"},"(enclosed)")," with references to its surrounding state ",(0,r.kt)("em",{parentName:"p"},"(the lexical environment)"),". In other words, a closure gives you access to an outer function\u2019s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time."),(0,r.kt)("p",null,"Closures are important because they control what is and isn\u2019t in scope in a particular function, along with which variables are shared between sibling functions in the same containing scope. Understanding how variables and functions relate to each other is critical to understanding what\u2019s going on in your code, in both functional and object oriented programming styles."),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"Closures are frequently used in JavaScript for object data privacy, in event handlers and callback functions, and other functional programming patterns.")),(0,r.kt)("h3",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function init() {\n  var name = "Mozilla"; // name is a local variable created by init\n  function displayName() {\n    // displayName() is the inner function, a closure\n    alert(name); // use variable declared in the parent function\n  }\n  displayName();\n}\ninit();\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"init()")," creates a local variable called name and a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName()"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName()")," function is an inner function that is defined inside ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," and is available only within the body of the ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," function. Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName()")," function has no local variables of its own. However, since inner functions have access to the variables of outer functions, ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName()")," can access the variable name declared in the parent function, ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),"."),(0,r.kt)("h3",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function makeFunc() {\n  var name = "Mozilla";\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n')),(0,r.kt)("p",null,"Running this code has exactly the same effect as the previous example of the ",(0,r.kt)("inlineCode",{parentName:"p"},"init()")," function above. What's different (and interesting) is that the ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName()")," inner function is returned from the outer function ",(0,r.kt)("em",{parentName:"p"},"before being executed"),"."),(0,r.kt)("p",null,"In this case, myFunc is a reference to the instance of the function ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," that is created when makeFunc is run. The instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," maintains a reference to its lexical environment, within which the variable name exists. For this reason, when myFunc is invoked, the variable name remains available for use, and ",(0,r.kt)("strong",{parentName:"p"},'"Mozilla"')," is passed to alert."),(0,r.kt)("h2",{id:"example-3"},"Example 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function makeAdder(x) {\n  return function (y) {\n    return x + y;\n  };\n}\n\nvar add5 = makeAdder(5);\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2)); // 7\nconsole.log(add10(2)); // 12\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"add5")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"add10")," are both closures. They share the same function body definition, but store different ",(0,r.kt)("em",{parentName:"p"},"lexical environments"),". In ",(0,r.kt)("inlineCode",{parentName:"p"},"add5's")," ",(0,r.kt)("em",{parentName:"p"},"lexical environment"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"5"),", while in the ",(0,r.kt)("em",{parentName:"p"},"lexical environment")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"add10"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"10"),"."),(0,r.kt)("h3",{id:"example-4---practical-closures"},"Example 4 - Practical closures"),(0,r.kt)("p",null,"Closures are useful because they let you associate data (the lexical environment) with a function that operates on that data. This has obvious parallels to object-oriented programming, where objects allow you to associate data (the object's properties) with one or more methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function makeSizer(size) {\n  return function () {\n    document.body.style.fontSize = size + "px";\n  };\n}\n\nvar size12 = makeSizer(12);\nvar size14 = makeSizer(14);\nvar size16 = makeSizer(16);\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"size12"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"size14"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"size16")," are now functions that resize the body text to 12, 14, and 16 pixels, respectively. You can attach them to buttons (in this case hyperlinks) as demonstrated in the following code example."),(0,r.kt)("h2",{id:"closure-scope-chain"},"Closure Scope Chain"),(0,r.kt)("p",null,"Every closure has three scopes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Local Scope (Own scope)"),(0,r.kt)("li",{parentName:"ul"},"Outer Functions Scope"),(0,r.kt)("li",{parentName:"ul"},"Global Scope")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// global scope\nvar e = 10;\nfunction sum(a) {\n  return function (b) {\n    return function (c) {\n      // outer functions scope\n      return function (d) {\n        // local scope\n        return a + b + c + d + e;\n      };\n    };\n  };\n}\n\nconsole.log(sum(1)(2)(3)(4)); // log 20\n")),(0,r.kt)("h2",{id:"performance-considerations"},"Performance considerations"),(0,r.kt)("p",null,"It is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, as it will negatively affect script performance both in terms of processing speed and memory consumption."),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36"},"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures")))}u.isMDXComponent=!0}}]);