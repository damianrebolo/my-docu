"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7137],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,h=p["".concat(c,".").concat(d)]||p[d]||m[d]||r;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5371:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const r={id:"re-memoization",title:"React Memoization",sidebar_label:"Memoization",slug:"/react-memoization"},i=void 0,s={unversionedId:"react/re-memoization",id:"react/re-memoization",title:"React Memoization",description:'In React, we can optimize our application by avoiding unnecessary component re-render using memoization. Components re-render because of two things: a change in state or a change in props. This is precisely the information we can "cache" to avoid unnecessary re-renders.',source:"@site/docs/react/re-memoization.md",sourceDirName:"react",slug:"/react-memoization",permalink:"/my-docu/docs/react-memoization",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/react/re-memoization.md",tags:[],version:"current",frontMatter:{id:"re-memoization",title:"React Memoization",sidebar_label:"Memoization",slug:"/react-memoization"},sidebar:"mySidebar",previous:{title:"State",permalink:"/my-docu/docs/react-state"},next:{title:"Basic Component",permalink:"/my-docu/docs/basic-component"}},c={},l=[{value:"Memo Higher Order Component",id:"memo-higher-order-component",level:2},{value:"When to Use the useCallback Hook",id:"when-to-use-the-usecallback-hook",level:2},{value:"When to Use the useMemo Hook",id:"when-to-use-the-usememo-hook",level:2},{value:"When to Memoize",id:"when-to-memoize",level:2}],u={toc:l};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'In React, we can optimize our application by avoiding unnecessary component re-render using memoization. Components re-render because of two things: a change in state or a change in props. This is precisely the information we can "cache" to avoid unnecessary re-renders.'),(0,a.kt)("h2",{id:"memo-higher-order-component"},"Memo Higher Order Component"),(0,a.kt)("p",null,"We use ",(0,a.kt)("inlineCode",{parentName:"p"},"React.memo")," for Pure components, and what is a pure component then? Well, based on the concept of purity in functional programming paradigms, a function is said to be pure if:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A function is said to be pure if the return value is determined by its input values only"),(0,a.kt)("li",{parentName:"ul"},"The return value is always the same for the same input values.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"Child.jsx","Child.jsx":!0},'import React from "react";\n\nexport default React.memo(function Child({ name }) {\n  return <div>{name}</div>;\n});\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"A higher order component or HOC")," is similar to a higher order function in javascript. Higher order functions are functions that take other functions as arguments OR return other functions. React HOCs take a component as a prop, and manipulate it to some end without actually changing the component itself. You can think of this like wrapper components."),(0,a.kt)("h2",{id:"when-to-use-the-usecallback-hook"},"When to Use the useCallback Hook"),(0,a.kt)("p",null,"In reality a new function is being created on every ",(0,a.kt)("inlineCode",{parentName:"p"},"re-render"),". So if a new function is being created, that means we have a new prop and that means our component should ",(0,a.kt)("inlineCode",{parentName:"p"},"re-render")," as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"Counter.jsx","Counter.jsx":!0},'import { useState, useCallback } from "react";\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  const handleIncrement = useCallback(() => setCount(count + 1), []);\n\n  return <div>{count}</div>;\n}\n')),(0,a.kt)("p",null,"What ",(0,a.kt)("inlineCode",{parentName:"p"},"useCallback")," does is to hold on to the value of the function despite the component ",(0,a.kt)("inlineCode",{parentName:"p"},"re-rendering"),", so the prop will remain the same as long as the function value remains the same as well."),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"array present in the hook"),", we can declare variables that would trigger the change of the function value when the variable changes too."),(0,a.kt)("h2",{id:"when-to-use-the-usememo-hook"},"When to Use the useMemo Hook"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useMemo")," is a hook very similar to useCallback, but instead caching a function, useMemo will cache the return value of a function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const answer = useMemo(() => num + 1, [num]);\n")),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"useMemo")," in a very similar way to the ",(0,a.kt)("inlineCode",{parentName:"p"},"memo HOC"),". The difference is that ",(0,a.kt)("inlineCode",{parentName:"p"},"useMemo")," is a hook with an ",(0,a.kt)("inlineCode",{parentName:"p"},"array of dependences"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"memo")," is a HOC that accepts as parameter an optional function that uses props to conditionally update the component."),(0,a.kt)("h2",{id:"when-to-memoize"},"When to Memoize"),(0,a.kt)("p",null,"Memoization in React is a good tool to have in our belts, but it's not something you should use everywhere. These tools are useful for dealing with functions or tasks that require heavy computation."))}m.isMDXComponent=!0}}]);