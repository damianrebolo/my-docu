"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1041],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),u=a,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"w3-trees",title:"Trees",sidebar_label:"Trees",slug:"/w3-trees"},i=void 0,s={unversionedId:"web3/w3-trees",id:"web3/w3-trees",title:"Trees",description:"Binary Search Tree",source:"@site/docs/web3/w3-tress.md",sourceDirName:"web3",slug:"/w3-trees",permalink:"/my-docu/docs/w3-trees",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/web3/w3-tress.md",tags:[],version:"current",frontMatter:{id:"w3-trees",title:"Trees",sidebar_label:"Trees",slug:"/w3-trees"},sidebar:"mySidebar",previous:{title:"Blockchain Architecture",permalink:"/my-docu/docs/w3-blockchain-architecture"}},l={},p=[{value:"Binary Search Tree",id:"binary-search-tree",level:3},{value:"Merkle Trees",id:"merkle-trees",level:3},{value:"What do we need in order to prove that <code>E</code> belongs in this tree?",id:"what-do-we-need-in-order-to-prove-that-e-belongs-in-this-tree",level:4}],c={toc:p};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"binary-search-tree"},"Binary Search Tree"),(0,a.kt)("p",null,"The word binary indicates that each nodes has at most 2 children. It's called a search tree because the order of the nodes is sorted by the value of the data. Let's take a look at an example:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(6832).Z,width:"359",height:"307"})),(0,a.kt)("p",null,"Any child that is to the left of it's parent is smaller. Any child that is to the right of it's parent is greater. For example, the root ",(0,a.kt)("inlineCode",{parentName:"p"},"5")," has two children ",(0,a.kt)("inlineCode",{parentName:"p"},"3")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"7"),". Since ",(0,a.kt)("inlineCode",{parentName:"p"},"3")," is less than ",(0,a.kt)("inlineCode",{parentName:"p"},"5"),", it is to the left of ",(0,a.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,a.kt)("p",null,"Knowing that the data is in this order, it will take us less time to find a particular node. ",(0,a.kt)("strong",{parentName:"p"},"We can look for 4"),". Starting at the root, we know it's less than ",(0,a.kt)("inlineCode",{parentName:"p"},"5")," so we go left. We encounter ",(0,a.kt)("inlineCode",{parentName:"p"},"3")," next and know that ",(0,a.kt)("inlineCode",{parentName:"p"},"4")," is greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),", so we go right. There, we find ",(0,a.kt)("inlineCode",{parentName:"p"},"4"),". On average this will be faster than searching randomly. The time savings become greater the bigger the tree is."),(0,a.kt)("h3",{id:"merkle-trees"},"Merkle Trees"),(0,a.kt)("p",null,"Quite simply, a Merkle Tree is a data structure that allows us to make efficient verifications that data belongs in a larger set of data."),(0,a.kt)("p",null,"They are commonly used in Peer to Peer networks where efficient proofs of this nature will help increase the scalability of the network."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"      ABCDEFGH <-- Merkle Root\n       /    \\\n    ABCD     EFGH\n    / \\      / \\\n   AB  CD   EF  GH\n  / \\  / \\  / \\ / \\\n  A B  C D  E F G H\n")),(0,a.kt)("p",null,"Each single letter represents a hash. The combined letters represent concatenated hashes that have been combined and hashed to form a new hash."),(0,a.kt)("p",null,"As peers in a system, I can simply ask if your root matches mine. If so, we agree. This is a nice optimization for distributed systems of any kind!"),(0,a.kt)("p",null,"This binary tree structure affords us one further optimization: it allows us to verify a single piece of data belongs in the tree ",(0,a.kt)("strong",{parentName:"p"},"without having all of the data"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"      ABCDEFGH\n       /    \\\n    ABCD     EFGH\n    / \\      / \\\n   -  -     EF  GH\n  / \\  / \\  / \\ / \\\n  - -  - -  E F -  -\n")),(0,a.kt)("h4",{id:"what-do-we-need-in-order-to-prove-that-e-belongs-in-this-tree"},"What do we need in order to prove that ",(0,a.kt)("inlineCode",{parentName:"h4"},"E")," belongs in this tree?"),(0,a.kt)("p",null,"Just ",(0,a.kt)("inlineCode",{parentName:"p"},"F"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"GH"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ABCD"),". We use these to calculate ",(0,a.kt)("inlineCode",{parentName:"p"},"EF"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"EFGH"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"ABCDEFGH"),". Then we can compare the result to our expected root ",(0,a.kt)("inlineCode",{parentName:"p"},"ABCDEFGH"),"."),(0,a.kt)("p",null,"If something went wrong along the way, we would notice it at the root. For example if we replaced ",(0,a.kt)("inlineCode",{parentName:"p"},"E")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"M"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"      ABCDMFGH\n       /    \\\n    ABCD     MFGH\n    / \\      / \\\n   -  -     MF  GH\n  / \\  / \\  / \\ / \\\n  - -  - -  M F -  -\n")),(0,a.kt)("p",null,"We can quickly check ",(0,a.kt)("inlineCode",{parentName:"p"},"ABCDMFGH")," against the our expected root ",(0,a.kt)("inlineCode",{parentName:"p"},"ABCDEFGH")," and see we did not get our expected hash. Something's wrong."),(0,a.kt)("p",null,"The savings become important with larger trees where the average case for verification of tree is ",(0,a.kt)("inlineCode",{parentName:"p"},"log2(n)")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is the number of nodes in the tree. So for a tree of size 128, it would take only 7 hashes to determine the root."))}d.isMDXComponent=!0},6832:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/binary-search-tree-2d14abd09817ddb466bdb03eabe464df.png"}}]);