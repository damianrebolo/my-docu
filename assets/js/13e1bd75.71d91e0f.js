"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3836],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(h,r(r({ref:t},p),{},{components:n})):o.createElement(h,r({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1822:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const i={id:"js-objects-in-js",title:"Objects",sidebar_label:"Objects",slug:"/objects-in-js",sidebar_position:6},r=void 0,s={unversionedId:"javascript/js-objects-in-js",id:"javascript/js-objects-in-js",title:"Objects",description:"In JavaScript, anything that is not a primitive type ( undefined , null , boolean , number , or string ) is an object.",source:"@site/docs/javascript/js-objects-in-js.md",sourceDirName:"javascript",slug:"/objects-in-js",permalink:"/my-docu/docs/objects-in-js",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/js-objects-in-js.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"js-objects-in-js",title:"Objects",sidebar_label:"Objects",slug:"/objects-in-js",sidebar_position:6},sidebar:"mySidebar",previous:{title:"What is a Closure?",permalink:"/my-docu/docs/closure"},next:{title:"Async / await",permalink:"/my-docu/docs/async-await"}},l={},c=[{value:"This keyword",id:"this-keyword",level:2},{value:"Global Context",id:"global-context",level:3},{value:"Function Context",id:"function-context",level:3},{value:"Class Context",id:"class-context",level:3},{value:"This refresher",id:"this-refresher",level:2},{value:"bind() method",id:"bind-method",level:3},{value:"call(), apply() method",id:"call-apply-method",level:3},{value:"__<strong>proto</strong>__",id:"__proto__",level:2},{value:"Prototype",id:"prototype",level:2},{value:"Resources",id:"resources",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"important"},(0,a.kt)("p",{parentName:"admonition"},"In JavaScript, anything that is not a primitive type ( undefined , null , boolean , number , or string ) is an object.\nThere is not a correct way to create an object in JavaScript.")),(0,a.kt)("h2",{id:"this-keyword"},"This keyword"),(0,a.kt)("p",null,"A property of an execution context (global, function or eval) that, in non\u2013strict mode, is always a reference to an object and in strict mode can be any value."),(0,a.kt)("h3",{id:"global-context"},"Global Context"),(0,a.kt)("p",null,"In the global execution context (outside of any function), this refers to the global object whether in strict mode or not."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// In web browsers, the window object is also the global object:\nconsole.log(this === window); // true\n\na = 37;\nconsole.log(window.a); // 37\n\nthis.b = "MDN";\nconsole.log(window.b); // "MDN"\nconsole.log(b); // "MDN"\n')),(0,a.kt)("h3",{id:"function-context"},"Function Context"),(0,a.kt)("p",null,"Inside a function, the value of this depends on how the function is called."),(0,a.kt)("admonition",{type:"important"},(0,a.kt)("p",{parentName:"admonition"},"Since the following code is not in ",(0,a.kt)("inlineCode",{parentName:"p"},"strict mode"),", and because the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," is not set by the call, ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," will default to the global object, which is ",(0,a.kt)("inlineCode",{parentName:"p"},"window")," in a browser.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function f1() {\n  return this;\n}\n\nf1() === window; // true\n")),(0,a.kt)("admonition",{type:"important"},(0,a.kt)("p",{parentName:"admonition"},"In ",(0,a.kt)("inlineCode",{parentName:"p"},"strict mode"),", however, if the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," is not set when entering an execution context, it remains as ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'function f2() {\n  "use strict"; // see strict mode\n  return this;\n}\n\nf2() === undefined; // true\n')),(0,a.kt)("h3",{id:"class-context"},"Class Context"),(0,a.kt)("p",null,"The behavior of ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"classes")," and functions is similar, since classes are functions under the hood. But there are some differences and caveats."),(0,a.kt)("h2",{id:"this-refresher"},"This refresher"),(0,a.kt)("h3",{id:"bind-method"},"bind() method"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"bind()")," method creates a new function that, when called, has its this keyword set to the provided value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var pokemon = {\n  firstname: "Pika",\n  lastname: "Chu ",\n  getPokeName: function () {\n    var fullname = this.firstname + " " + this.lastname;\n    return fullname;\n  },\n};\n\nvar pokemonName = function () {\n  console.log(this.getPokeName() + "I choose you!");\n};\n\n// creates new object and binds pokemon. \'this\' of pokemon === pokemon now\nvar logPokemon = pokemonName.bind(pokemon);\n\nlogPokemon(); // \'Pika Chu I choose you!\'\n')),(0,a.kt)("p",null,"Let\u2019s break it down. When we use the bind() method:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"the JS engine is creating a new pokemonName instance and binding pokemon as its this variable. It is important to understand that it copies the pokemonName function."),(0,a.kt)("li",{parentName:"ol"},"After creating a copy of the pokemonName function it is able to call logPokemon(), although it wasn\u2019t on the pokemon object initially. It will now recognizes its properties (Pika and Chu) and its methods.")),(0,a.kt)("h3",{id:"call-apply-method"},"call(), apply() method"),(0,a.kt)("p",null,"The call() method calls a function with a given this value and arguments provided individually."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"call()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"apply()")," serve the exact same purpose. The only difference between how they work is that ",(0,a.kt)("inlineCode",{parentName:"p"},"call()")," expects all parameters to be passed in individually, whereas ",(0,a.kt)("inlineCode",{parentName:"p"},"apply()")," expects an array of all of our parameters.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var pokemon = {\n  firstname: "Pika",\n  lastname: "Chu ",\n  getPokeName: function () {\n    var fullname = this.firstname + " " + this.lastname;\n    return fullname;\n  },\n};\n\nvar pokemonName = function (snack, hobby) {\n  console.log(this.getPokeName() + " loves " + snack + " and " + hobby);\n};\n\npokemonName.call(pokemon, "sushi", "algorithms");\n// Pika Chu  loves sushi and algorithms\n\npokemonName.apply(pokemon, ["sushi", "algorithms"]);\n// Pika Chu  loves sushi and algorithms\n')),(0,a.kt)("h2",{id:"__proto__"},"_","_",(0,a.kt)("strong",{parentName:"h2"},"proto"),"_","_"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"_","_",(0,a.kt)("strong",{parentName:"p"},"proto"),"_","_"," is the property on an object that points out the proprotype that had been set for that object")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const dog = { sound: "woof!" };\nconst myDog = { name: "My Dog name" };\n\nObject.setPrototypeOf(myDog, dog);\nconsole.log(myDog.__proto__);\n//{sound: "woof!"}\n')),(0,a.kt)("h2",{id:"prototype"},"Prototype"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"prototype is the property on an object that is set as a property if you are using new keyword.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var Person = function (name) {\n  this.name = name;\n  this.canTalk = true;\n};\n\nPerson.prototype.greet = function () {\n  if (this.canTalk) {\n    console.log("Hi, I am " + this.name);\n  }\n};\n\nconst pichi = new Person("pichiiii");\nconsole.log(pichi.greet());\n//Hi, I am pichiiii\n')),(0,a.kt)("p",null,"When a function is called, the arguments to the call are held in the array-like ",(0,a.kt)("inlineCode",{parentName:"p"},"variable")," arguments. For example, in the call myFn(a, b, c), the arguments within myFn's body will contain 3 array-like elements corresponding to (a, b, c)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const myFunction = function (a, b, c) {\n  console.log(arguments);\n};\nconsole.log(myFunction("this is a", "this is b", "this is c"));\n//Arguments(3)\xa0["this is a", "this is b", "this is c"]\n')),(0,a.kt)("h2",{id:"resources"},"Resources"))}m.isMDXComponent=!0}}]);